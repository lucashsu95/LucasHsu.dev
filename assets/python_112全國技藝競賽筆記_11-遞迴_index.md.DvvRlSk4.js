import{_ as t,c as e,J as s,V as h,E as i,o as l}from"./chunks/framework.RK-3fdBv.js";const C=JSON.parse('{"title":"遞迴","description":"","frontmatter":{},"headers":[],"relativePath":"python/112全國技藝競賽筆記/11-遞迴/index.md","filePath":"python/112全國技藝競賽筆記/11-遞迴/index.md","lastUpdated":1732893027000}'),p={name:"python/112全國技藝競賽筆記/11-遞迴/index.md"},k=h(`<h1 id="遞迴" tabindex="-1">遞迴 <a class="header-anchor" href="#遞迴" aria-label="Permalink to &quot;遞迴&quot;">​</a></h1><h2 id="介紹" tabindex="-1">介紹 <a class="header-anchor" href="#介紹" aria-label="Permalink to &quot;介紹&quot;">​</a></h2><ol><li><p><strong>定義：</strong> 遞迴是一種<code>函式呼叫自身</code>的技術，通常用於解決可以被分解為更小子問題的問題。</p></li><li><p><strong>遞迴情況：</strong> 遞迴函式內部包含調用自身的程式碼塊，通常用於處理更小的問題實例，使問題逐漸縮小直到達到基本情況為止。</p></li><li><p><strong>堆疊使用：</strong> 遞迴調用會在堆疊中創建新的函式呼叫紀錄，這些紀錄按照後進先出的順序堆疊，直到遞迴到達基本情況並開始返回結果。</p></li></ol><h2 id="簡單範例" tabindex="-1">簡單範例 <a class="header-anchor" href="#簡單範例" aria-label="Permalink to &quot;簡單範例&quot;">​</a></h2><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 輸出 1 到 10</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">def</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> add</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">n</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    print</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">n</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> n </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 9</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> return</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> add</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">n </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> n </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">add</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre></div><p>提問：怎麼輸出 10 到 1 呢?</p>`,6);function r(d,o,c,g,y,A){const a=i("NolebaseGitContributors"),n=i("NolebaseGitChangelog");return l(),e("div",null,[k,s(a),s(n)])}const D=t(p,[["render",r]]);export{C as __pageData,D as default};
