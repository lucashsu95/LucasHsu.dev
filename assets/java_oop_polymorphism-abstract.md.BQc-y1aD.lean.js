import{_ as h,c as k,J as s,V as l,E as i,o as t}from"./chunks/framework.RK-3fdBv.js";const c=JSON.parse('{"title":"第三章：抽象的力量 - 多型與組合設計","description":"深入學習Java多型（Polymorphism）與抽象類別！透過通知系統和智慧家庭設備實例，完整掌握「同一介面，多種實作」的威力。涵蓋組合模式、多重介面應用、extends vs implements差異比較，從基礎概念到進階設計模式，建立紮實的OOP抽象思維能力。","frontmatter":{"outline":"deep","head":[["meta",{"name":"author","content":"許恩綸"}],["meta",{"name":"keywords","content":"Java多型教學, Polymorphism多型實現, Java抽象類別Abstract, 組合模式Composite Pattern, Interface進階應用, extends vs implements差異, 通知系統設計, 智慧家庭設備控制, Java繼承與介面比較, 物件導向設計模式, OOP進階概念, Java多重介面實作, 抽象類別實戰應用, 多型與組合設計"}],["meta",{"name":"description","content":"深入學習Java多型（Polymorphism）與抽象類別！透過通知系統和智慧家庭設備實例，完整掌握「同一介面，多種實作」的威力。涵蓋組合模式、多重介面應用、extends vs implements差異比較，從基礎概念到進階設計模式，建立紮實的OOP抽象思維能力。"}],["meta",{"property":"og:title","content":"Java多型與抽象類別完全解析 | Polymorphism進階設計模式實戰"}],["meta",{"property":"og:description","content":"透過通知系統和智慧家庭設備實例，深度學習Java多型概念與抽象類別應用。從遙控器比喻到組合模式實作，完整掌握「同一介面，多種實作」的設計思維，提升物件導向抽象能力。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://lucashsu95.github.io/LucasHsu.dev/images/java-cover.jpg"}],["meta",{"property":"og:url","content":"https://lucashsu95.github.io/LucasHsu.dev/java/oop/class-object-interface.html"}],["meta",{"property":"og:site_name","content":"LucasHsu.dev - 程式開發教學"}],["meta",{"property":"article:author","content":"許恩綸"}],["meta",{"property":"article:published_time","content":"2024-10-04T16:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-04T16:00:00.000Z"}],["meta",{"property":"article:section","content":"Java程式設計"}],["meta",{"property":"article:tag","content":"Java多型"}],["meta",{"property":"article:tag","content":"Polymorphism"}],["meta",{"property":"article:tag","content":"抽象類別"}],["meta",{"property":"article:tag","content":"組合模式"}],["meta",{"property":"article:tag","content":"OOP進階"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:site","content":"@lucashsu95"}],["meta",{"name":"twitter:creator","content":"@lucashsu95"}],["meta",{"name":"twitter:title","content":"Java多型與抽象類別完全解析 | Polymorphism進階設計模式實戰"}],["meta",{"name":"twitter:description","content":"透過通知系統實例深度學習Java多型概念！從遙控器比喻到組合模式實作，完整掌握「同一介面，多種實作」設計思維，提升OOP抽象能力。"}],["link",{"rel":"canonical","href":"https://lucashsu95.github.io/LucasHsu.dev/java/oop/polymorphism-abstract.html"}],["meta",{"name":"robots","content":"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1"}],["script",{"type":"application/ld+json","content":"{\\n  \\"@context\\": \\"https://schema.org\\",\\n  \\"@type\\": \\"TechnicalArticle\\",\\n  \\"headline\\": \\"Java多型與抽象類別完全解析 | Polymorphism進階設計模式實戰\\",\\n  \\"description\\": \\"深入學習Java多型（Polymorphism）與抽象類別！透過通知系統和智慧家庭設備實例，完整掌握『同一介面，多種實作』的威力，涵蓋組合模式與進階OOP設計思維。\\",\\n  \\"author\\": {\\n    \\"@type\\": \\"Person\\", \\n    \\"name\\": \\"許恩綸\\",\\n    \\"url\\": \\"https://lucashsu95.github.io/LucasHsu.dev/\\"\\n  },\\n  \\"publisher\\": {\\n    \\"@type\\": \\"Organization\\",\\n    \\"name\\": \\"LucasHsu.dev\\",\\n    \\"url\\": \\"https://lucashsu95.github.io/LucasHsu.dev/\\"\\n  },\\n  \\"datePublished\\": \\"2024-10-05T00:00:00+08:00\\",\\n  \\"dateModified\\": \\"2024-10-05T00:00:00+08:00\\",\\n  \\"mainEntityOfPage\\": {\\n    \\"@type\\": \\"WebPage\\",\\n    \\"@id\\": \\"https://lucashsu95.github.io/LucasHsu.dev/java/oop/polymorphism-abstract.html\\"\\n  },\\n  \\"image\\": \\"https://lucashsu95.github.io/LucasHsu.dev/images/java-cover.jpg\\",\\n  \\"articleSection\\": \\"Java程式設計\\",\\n  \\"keywords\\": [\\"Java多型\\", \\"Polymorphism\\", \\"抽象類別\\", \\"組合模式\\", \\"Interface進階\\", \\"extends vs implements\\", \\"通知系統設計\\", \\"OOP進階\\"],\\n  \\"about\\": [\\n    {\\n      \\"@type\\": \\"Thing\\",\\n      \\"name\\": \\"Java多型（Polymorphism）\\",\\n      \\"description\\": \\"同一介面多種實作的設計概念與應用\\"\\n    },\\n    {\\n      \\"@type\\": \\"Thing\\", \\n      \\"name\\": \\"抽象類別（Abstract Class）\\",\\n      \\"description\\": \\"介於介面與具體類別間的抽象設計\\"\\n    },\\n    {\\n      \\"@type\\": \\"Thing\\",\\n      \\"name\\": \\"組合模式（Composite Pattern）\\",\\n      \\"description\\": \\"透過組合實現複雜功能的設計模式\\"\\n    }\\n  ],\\n  \\"teaches\\": [\\n    \\"多型概念與實際應用\\",\\n    \\"抽象類別設計與實作\\",\\n    \\"組合模式設計思維\\",\\n    \\"通知系統架構設計\\",\\n    \\"extends vs implements差異\\",\\n    \\"多重介面組合應用\\"\\n  ],\\n  \\"audience\\": {\\n    \\"@type\\": \\"Audience\\",\\n    \\"audienceType\\": \\"Java程式設計學習者\\"\\n  },\\n  \\"educationalLevel\\": \\"初學者\\",\\n  \\"learningResourceType\\": \\"實戰教學文章\\",\\n  \\"programmingLanguage\\": \\"Java\\",\\n  \\"typicalAgeRange\\": \\"18-45\\"\\n}\\n"}]]},"headers":[],"relativePath":"java/oop/polymorphism-abstract.md","filePath":"java/oop/polymorphism-abstract.md","lastUpdated":1759655545000}'),p={name:"java/oop/polymorphism-abstract.md"},e=l("",49);function r(d,g,y,A,B,D){const a=i("NolebaseGitContributors"),n=i("NolebaseGitChangelog");return t(),k("div",null,[e,s(a),s(n)])}const C=h(p,[["render",r]]);export{c as __pageData,C as default};
