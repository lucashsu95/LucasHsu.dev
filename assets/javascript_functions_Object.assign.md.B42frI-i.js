import{_ as e,c as n,J as s,V as h,E as i,o as l}from"./chunks/framework.RK-3fdBv.js";const j=JSON.parse('{"title":"Object.assign()","description":"","frontmatter":{"outline":[2,3],"head":[["meta",{"name":"author","content":"許恩綸"}],["meta",{"name":"keywords","content":"Object.assign,javascript,js,複製Object"}],["meta",{"name":"og:title","content":"Object.assign() - javascript"}],["meta",{"name":"og:description","content":"Object.assign() 是 JavaScript 中的一個靜態方法，用於將一個或多個源對象的可枚舉屬性複製到目標對象。這個方法返回修改後的目標對象。"}],["meta",{"name":"og:type","content":"article"}],["meta",{"name":"og:image","content":"https://lucashsu95.github.io/LucasHsu.dev/images/javascript-cover.jpg"}]]},"headers":[],"relativePath":"javascript/functions/Object.assign.md","filePath":"javascript/functions/Object.assign.md","lastUpdated":1758447054000}'),p={name:"javascript/functions/Object.assign.md"},k=h(`<h1 id="object-assign" tabindex="-1">Object.assign() <a class="header-anchor" href="#object-assign" aria-label="Permalink to &quot;Object.assign()&quot;">​</a></h1><p><code>Object.assign()</code> 是 JavaScript 中的一個靜態方法，用於將一個或多個源對象的可枚舉屬性複製到目標對象。這個方法返回修改後的目標對象。</p><h2 id="語法" tabindex="-1">語法 <a class="header-anchor" href="#語法" aria-label="Permalink to &quot;語法&quot;">​</a></h2><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Object</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">assign</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">target</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ...</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">sources</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre></div><h2 id="參數" tabindex="-1">參數 <a class="header-anchor" href="#參數" aria-label="Permalink to &quot;參數&quot;">​</a></h2><ul><li><strong>target</strong>: 目標對象，屬性將被複製到這個對象。</li><li><strong>sources</strong>: 一個或多個源對象，從這些對象中複製屬性。</li></ul><h2 id="返回值" tabindex="-1">返回值 <a class="header-anchor" href="#返回值" aria-label="Permalink to &quot;返回值&quot;">​</a></h2><p>返回目標對象。</p><h2 id="使用示例" tabindex="-1">使用示例 <a class="header-anchor" href="#使用示例" aria-label="Permalink to &quot;使用示例&quot;">​</a></h2><h3 id="合併對象" tabindex="-1">合併對象 <a class="header-anchor" href="#合併對象" aria-label="Permalink to &quot;合併對象&quot;">​</a></h3><p>以下示例展示了如何使用 <code>Object.assign()</code> 合併多個對象：</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> obj1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> };</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> obj2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> };</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> obj3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> c</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 合併 obj1, obj2, obj3 到一個新對象</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> mergedObj</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Object</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">assign</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">({},</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> obj1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> obj2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> obj3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">mergedObj</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 輸出: { a: 1, b: 2, c: 3 }</span></span></code></pre></div><p>在這個例子中，使用空對象 <code>{}</code> 作為目標對象，這樣可以避免修改任何源對象。</p><p>這裡，<code>copy</code> 是 <code>original</code> 的一個淺拷貝，兩者的屬性相同。</p><h2 id="注意事項" tabindex="-1">注意事項 <a class="header-anchor" href="#注意事項" aria-label="Permalink to &quot;注意事項&quot;">​</a></h2><ol><li><strong>淺拷貝</strong>: <code>Object.assign()</code> 只會進行淺拷貝，對於嵌套對象，僅複製引用。如果源對象的某個屬性是對象，則只會複製該對象的引用。</li><li><strong>可枚舉屬性</strong>: 只有可枚舉的自有屬性會被複製，原型鏈上的屬性不會被複製。</li><li><strong>處理 null 或 undefined</strong>: 如果源對象是 <code>null</code> 或 <code>undefined</code>，則會被忽略，不會拋出錯誤。</li></ol><p><code>Object.assign()</code> 是一個非常有用的方法，常用於對象合併、克隆和屬性添加等操作[1][2][4]。</p>`,17);function o(r,d,c,g,y,b){const a=i("NolebaseGitContributors"),t=i("NolebaseGitChangelog");return l(),n("div",null,[k,s(a),s(t)])}const A=e(p,[["render",o]]);export{j as __pageData,A as default};
