import{_ as t,c as n,J as s,V as h,E as i,o as l}from"./chunks/framework.RK-3fdBv.js";const u=JSON.parse('{"title":"Object.entries()","description":"","frontmatter":{"outline":[2,3],"head":[["meta",{"name":"author","content":"許恩綸"}],["meta",{"name":"keywords","content":"Object.entries,javascript,js,Object轉陣列,Object轉Array"}],["meta",{"property":"og:title","content":"Object.entries() - javascript"}],["meta",{"property":"og:description","content":"Object.entries() 是 JavaScript 中的一個靜態方法，用於返回一個給定對象的可枚舉屬性鍵值對的數組。這個方法的主要功能是將對象的屬性轉換為一個由鍵值對組成的數組，每個鍵值對也是一個數組，第一個元素是屬性鍵，第二個元素是對應的屬性值。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://lucashsu95.github.io/LucasHsu.dev/images/javascript-cover.jpg"}]]},"headers":[],"relativePath":"javascript/functions/Object.entries.md","filePath":"javascript/functions/Object.entries.md","lastUpdated":1758447054000}'),p={name:"javascript/functions/Object.entries.md"},k=h(`<h1 id="object-entries" tabindex="-1">Object.entries() <a class="header-anchor" href="#object-entries" aria-label="Permalink to &quot;Object.entries()&quot;">​</a></h1><p><code>Object.entries()</code> 是 JavaScript 中的一個靜態方法，用於返回一個給定對象的可枚舉屬性鍵值對的數組。這個方法的主要功能是將對象的屬性轉換為一個由鍵值對組成的數組，每個鍵值對也是一個數組，第一個元素是屬性鍵，第二個元素是對應的屬性值。</p><h2 id="語法" tabindex="-1">語法 <a class="header-anchor" href="#語法" aria-label="Permalink to &quot;語法&quot;">​</a></h2><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Object</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">entries</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">obj</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre></div><h2 id="參數" tabindex="-1">參數 <a class="header-anchor" href="#參數" aria-label="Permalink to &quot;參數&quot;">​</a></h2><ul><li><strong>obj</strong>: 要處理的對象。</li></ul><h2 id="返回值" tabindex="-1">返回值 <a class="header-anchor" href="#返回值" aria-label="Permalink to &quot;返回值&quot;">​</a></h2><p>返回一個數組，數組的每個元素都是一個包含兩個元素的數組，分別是屬性鍵和屬性值。</p><h2 id="使用示例" tabindex="-1">使用示例 <a class="header-anchor" href="#使用示例" aria-label="Permalink to &quot;使用示例&quot;">​</a></h2><p>以下是一些使用 <code>Object.entries()</code> 的示例：</p><h3 id="基本示例" tabindex="-1">基本示例 <a class="header-anchor" href="#基本示例" aria-label="Permalink to &quot;基本示例&quot;">​</a></h3><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> person</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    firstName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">John</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    lastName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Doe</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    age</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 30</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Object</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">entries</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">person</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 輸出: [[&#39;firstName&#39;, &#39;John&#39;], [&#39;lastName&#39;, &#39;Doe&#39;], [&#39;age&#39;, 30]]</span></span></code></pre></div><p>在這個示例中，<code>Object.entries(person)</code> 將 <code>person</code> 對象的屬性轉換為一個數組。</p><h3 id="與-object-fromentries-結合使用" tabindex="-1">與 <code>Object.fromEntries()</code> 結合使用 <a class="header-anchor" href="#與-object-fromentries-結合使用" aria-label="Permalink to &quot;與 \`Object.fromEntries()\` 結合使用&quot;">​</a></h3><p><code>Object.entries()</code> 可以與 <code>Object.fromEntries()</code> 方法結合使用，實現對對象的轉換：</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> entries</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [[</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">name</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Alice</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">],</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">age</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 25</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]];</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> obj</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Object</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">fromEntries</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">entries</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">obj</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 輸出: { name: &#39;Alice&#39;, age: 25 }</span></span></code></pre></div><h2 id="注意事項" tabindex="-1">注意事項 <a class="header-anchor" href="#注意事項" aria-label="Permalink to &quot;注意事項&quot;">​</a></h2><ol><li><strong>可枚舉性</strong>: <code>Object.entries()</code> 僅返回對象自有的可枚舉屬性，不包括從原型鏈繼承的屬性。</li><li><strong>非可枚舉屬性</strong>: 如果對象中存在非可枚舉屬性，這些屬性將不會出現在返回的數組中。</li><li><strong>對於原始值的處理</strong>: 當傳入非對象類型（如數字或布林值）時，這些值會被轉換為對象，但 <code>undefined</code> 和 <code>null</code> 將引發 <code>TypeError</code>。</li><li><strong>順序</strong>: 返回的鍵值對的順序與對象屬性被創建的順序相同。</li></ol><p><code>Object.entries()</code> 是一個非常有用的方法，特別是在需要處理對象的鍵值對時，能夠提高代碼的可讀性和可維護性。</p>`,19);function r(o,d,c,g,y,b){const a=i("NolebaseGitContributors"),e=i("NolebaseGitChangelog");return l(),n("div",null,[k,s(a),s(e)])}const B=t(p,[["render",r]]);export{u as __pageData,B as default};
