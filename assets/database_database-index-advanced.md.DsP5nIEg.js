import{_ as r,c as d,m as s,J as i,w as e,a,V as p,E as n,o as k}from"./chunks/framework.RK-3fdBv.js";const P=JSON.parse('{"title":"進階索引實戰：B-Tree、複合索引與 Hash Map 全解析","description":"","frontmatter":{"outline":"deep","head":[["meta",{"name":"author","content":"許恩綸"}],["meta",{"name":"keywords","content":"進階索引,B-Tree,複合索引,Hash索引,資料庫優化,MySQL索引,PostgreSQL索引,索引設計,SQL效能"}],["meta",{"name":"og:title","content":"進階索引實戰：B-Tree、複合索引與 Hash Map 全解析"}],["meta",{"name":"og:description","content":"深入解析B-Tree、Hash索引與複合索引原理，學習進階索引設計技巧，從3秒查詢優化到50毫秒的實戰案例"}],["meta",{"name":"og:type","content":"article"}],["meta",{"name":"og:image","content":"./database-index-advanced-cover.png"}]]},"headers":[],"relativePath":"database/database-index-advanced.md","filePath":"database/database-index-advanced.md","lastUpdated":1751727176000}'),o={name:"database/database-index-advanced.md"},g=s("h1",{id:"進階索引實戰-b-tree、複合索引與-hash-map-全解析",tabindex:"-1"},[a("進階索引實戰：B-Tree、複合索引與 Hash Map 全解析 "),s("a",{class:"header-anchor",href:"#進階索引實戰-b-tree、複合索引與-hash-map-全解析","aria-label":'Permalink to "進階索引實戰：B-Tree、複合索引與 Hash Map 全解析"'},"​")],-1),c=s("blockquote",null,[s("p",null,[a("本文將「索引」觀念與前端離線快取 (Service Worker / PWA) 類比，幫助剛接觸後端資料庫的新手也能快速理解「"),s("strong",null,"為何加索引像是替資料上快取"),a("」。全篇以 MySQL 為例，但概念同樣適用於 PostgreSQL、SQL Server 等主流 RDBMS。")])],-1),A=s("h2",{id:"📋-文章目錄",tabindex:"-1"},[a("📋 文章目錄 "),s("a",{class:"header-anchor",href:"#📋-文章目錄","aria-label":'Permalink to "📋 文章目錄"'},"​")],-1),y=p(`<h2 id="_0-索引-≈-pwa-快取-觀念對照圖" tabindex="-1">0. 索引 ≈ PWA 快取：觀念對照圖 <a class="header-anchor" href="#_0-索引-≈-pwa-快取-觀念對照圖" aria-label="Permalink to &quot;0. 索引 ≈ PWA 快取：觀念對照圖&quot;">​</a></h2><table><thead><tr><th>Web PWA</th><th>Database</th><th>共通核心</th></tr></thead><tbody><tr><td>Service Worker Cache API</td><td>B-Tree / Hash Index</td><td>以空間換時間，加速存取</td></tr><tr><td>Cache Key</td><td>索引 Key</td><td>唯一定位資料位置</td></tr><tr><td>Cache First / Network First</td><td>Index Lookup / Table Scan</td><td>先查快取 (索引)，再回源 (資料表)</td></tr><tr><td>緩存更新 (Revalidate)</td><td>索引維護 (UPDATE / REBUILD)</td><td>保持資料與索引一致</td></tr></tbody></table><p><strong>結論</strong>：快取如何讓 PWA 離線秒開，索引就如何讓資料庫查詢「不掃全表」。</p><hr><h2 id="_1-b-tree-b-tree-關聯式資料庫的預設索引" tabindex="-1">1. B-Tree／B+Tree：關聯式資料庫的預設索引 <a class="header-anchor" href="#_1-b-tree-b-tree-關聯式資料庫的預設索引" aria-label="Permalink to &quot;1. B-Tree／B+Tree：關聯式資料庫的預設索引&quot;">​</a></h2><h3 id="_1-1-為何不是二元樹" tabindex="-1">1-1 為何不是二元樹？ <a class="header-anchor" href="#_1-1-為何不是二元樹" aria-label="Permalink to &quot;1-1 為何不是二元樹？&quot;">​</a></h3><p>磁碟 I/O 一次可讀取整個 <strong>block (4K/8K)</strong>，若用二元樹，每層只存 2 個指標，會造成 I/O 次數過多。B-Tree 允許 <em>m</em> 階，一頁存放大量 key，從而大幅降低樹高[25][29]。</p><h3 id="_1-2-結構分層" tabindex="-1">1-2 結構分層 <a class="header-anchor" href="#_1-2-結構分層" aria-label="Permalink to &quot;1-2 結構分層&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>Root (1 page)</span></span>
<span class="line"><span> ├─ Internal Node (多頁)</span></span>
<span class="line"><span> └─ Leaf Node (大量頁) ← 實際儲存資料位置 / PK 值</span></span></code></pre></div><ul><li><strong>葉層</strong> 按 key 有序鏈結，可做範圍掃描 (between、&gt; &lt;)。</li><li><strong>中間層</strong> 只存 key+child pointer，加快導向。</li><li><strong>根層</strong> 永遠在記憶體，搜尋複雜度 <strong>O(logₘ n)</strong>。</li></ul><blockquote><p>類比 Service Worker：Root 像 JS Runtime 常駐記憶體的快取索引表，Leaf 像實際 Cache Storage blob。</p></blockquote><h3 id="_1-3-建立範例" tabindex="-1">1-3 建立範例 <a class="header-anchor" href="#_1-3-建立範例" aria-label="Permalink to &quot;1-3 建立範例&quot;">​</a></h3><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">-- email + created_at 結合範圍 + 等值</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">CREATE</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> INDEX</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> idx_user_email_date</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> ON</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> users(email, created_at);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">-- 解讀</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">-- 1. email 完全比對時 → 直接走索引</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">-- 2. email 比對後再依 created_at 做區段掃描 → 善用葉層有序</span></span></code></pre></div><h3 id="_1-4-注意事項" tabindex="-1">1-4 注意事項 <a class="header-anchor" href="#_1-4-注意事項" aria-label="Permalink to &quot;1-4 注意事項&quot;">​</a></h3><ol><li><strong>最左前綴</strong>：查詢條件需含最左欄位才能命中索引。</li><li><strong>回表 (Key Lookup)</strong>：非覆蓋欄位須再到資料頁讀取，等同 PWA Cache Miss。</li></ol><hr><h2 id="_2-hash-index-o-1-等值查詢神器" tabindex="-1">2. Hash Index：O(1) 等值查詢神器 <a class="header-anchor" href="#_2-hash-index-o-1-等值查詢神器" aria-label="Permalink to &quot;2. Hash Index：O(1) 等值查詢神器&quot;">​</a></h2><h3 id="_2-1-運作流程" tabindex="-1">2-1 運作流程 <a class="header-anchor" href="#_2-1-運作流程" aria-label="Permalink to &quot;2-1 運作流程&quot;">​</a></h3><ol><li>對 key 執行雜湊函式 <code>hash(key)</code> → 得 bucket 位址。</li><li>直接定位資料列 (或 PK)。</li></ol><p>複雜度 <strong>O(1)</strong>，缺點是不支援範圍、排序，也無法利用最左前綴原則[30]。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">-- InnoDB MEMORY Engine 才支援顯式 HASH</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">CREATE</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> TABLE</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> hotspot</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  id </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">INT</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> PRIMARY KEY</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">,</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  code </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">CHAR</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">8</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">),</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  VALUE</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> INT</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">,</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  INDEX</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> USING</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> HASH</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (code)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) ENGINE</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">MEMORY;</span></span></code></pre></div><h3 id="_2-2-hash-map-類比" tabindex="-1">2-2 Hash Map 類比 <a class="header-anchor" href="#_2-2-hash-map-類比" aria-label="Permalink to &quot;2-2 Hash Map 類比&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// JS 雜湊表：Key =&gt; Value</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> map</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Map</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">map</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">set</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">code_abc</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 123</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">map</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">get</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">code_abc</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //  O(1)</span></span></code></pre></div><p>資料庫 Hash Index 與 JavaScript <code>Map</code> 原理一致：<strong>雜湊衝突 (collision) 需鏈結或開放定址處理</strong>。</p><hr><h2 id="_3-複合索引-composite-multiple-column-index" tabindex="-1">3. 複合索引（Composite / Multiple Column Index） <a class="header-anchor" href="#_3-複合索引-composite-multiple-column-index" aria-label="Permalink to &quot;3. 複合索引（Composite / Multiple Column Index）&quot;">​</a></h2><h3 id="_3-1-建立原則" tabindex="-1">3-1 建立原則 <a class="header-anchor" href="#_3-1-建立原則" aria-label="Permalink to &quot;3-1 建立原則&quot;">​</a></h3><ol><li><strong>選擇性最高 (cardinality) 放最左</strong></li><li><strong>將常用且固定的等值欄位放前</strong>，範圍條件塞尾端</li></ol><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">-- 依以下查詢頻率排序</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">-- a. WHERE country=&#39;TW&#39; AND status=&#39;paid&#39; AND created_at&gt;&#39;2025-01-01&#39;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">-- b. WHERE country=&#39;TW&#39; AND status=&#39;pending&#39;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">CREATE</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> INDEX</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> idx_orders_country_status_date</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">ON</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> orders(country, </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">status</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, created_at);</span></span></code></pre></div><h3 id="_3-2-覆蓋索引-covering-index" tabindex="-1">3-2 覆蓋索引 (Covering Index) <a class="header-anchor" href="#_3-2-覆蓋索引-covering-index" aria-label="Permalink to &quot;3-2 覆蓋索引 (Covering Index)&quot;">​</a></h3><p>若 <code>SELECT</code> 欄位完全被索引覆蓋 → <strong>不需回表</strong></p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">-- 索引欄位已包含查詢所需欄位 total</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">SELECT</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> country, </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">status</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, total</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">FROM</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">   orders </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">FORCE</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> INDEX</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (idx_orders_country_status_date)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">WHERE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  country</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">TW</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> AND</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> status</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">paid</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">; </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">-- 直接返回索引頁</span></span></code></pre></div><p><strong>結果</strong>：I/O 降至單純索引掃描，等同 PWA Cache First 策略。</p><hr><h2 id="_4-快取策略-vs-索引策略-最佳化思路對照" tabindex="-1">4. 快取策略 vs. 索引策略：最佳化思路對照 <a class="header-anchor" href="#_4-快取策略-vs-索引策略-最佳化思路對照" aria-label="Permalink to &quot;4. 快取策略 vs. 索引策略：最佳化思路對照&quot;">​</a></h2><table><thead><tr><th>PWA 策略</th><th>資料庫對應</th><th>適用場景</th></tr></thead><tbody><tr><td>Cache First</td><td>覆蓋索引 (只走索引頁)</td><td>熱門讀多寫少清單</td></tr><tr><td>Network First</td><td>非覆蓋索引 + 回表</td><td>資料即時性高，需要最新 row</td></tr><tr><td>Stale-While-Revalidate</td><td>舊索引保留 + 背景 REBUILD</td><td>夜間批次重建大索引</td></tr></tbody></table><blockquote><p>TIP：夜深人靜做 <code>OPTIMIZE TABLE</code> = 背景 Revalidate Cache。</p></blockquote><hr><h2 id="_5-實戰-從-3-秒-→-50-毫秒" tabindex="-1">5. 實戰：從 3 秒 → 50 毫秒 <a class="header-anchor" href="#_5-實戰-從-3-秒-→-50-毫秒" aria-label="Permalink to &quot;5. 實戰：從 3 秒 → 50 毫秒&quot;">​</a></h2><h3 id="_5-1-問題描述" tabindex="-1">5-1 問題描述 <a class="header-anchor" href="#_5-1-問題描述" aria-label="Permalink to &quot;5-1 問題描述&quot;">​</a></h3><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">SELECT</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> order_id, total</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">FROM</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">   orders</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">WHERE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  user_id </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 42</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">AND</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    status</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">paid</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">AND</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    order_date </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">BETWEEN</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">2025-01-01</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> AND</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">2025-07-01</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span></code></pre></div><ul><li>100 萬筆訂單，EXPLAIN 顯示 <code>type: ALL</code>，耗時 3 秒。</li></ul><h3 id="_5-2-解決方案" tabindex="-1">5-2 解決方案 <a class="header-anchor" href="#_5-2-解決方案" aria-label="Permalink to &quot;5-2 解決方案&quot;">​</a></h3><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">CREATE</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> INDEX</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> idx_orders_user_status_date</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">ON</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> orders(user_id, </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">status</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, order_date);</span></span></code></pre></div><h3 id="_5-3-成果驗證" tabindex="-1">5-3 成果驗證 <a class="header-anchor" href="#_5-3-成果驗證" aria-label="Permalink to &quot;5-3 成果驗證&quot;">​</a></h3><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">EXPLAIN </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">SELECT</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ... ;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">-- type: RANGE / rows: 120 →  I/O 大減</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">-- 實測耗時 ~50 ms</span></span></code></pre></div><hr><h2 id="_6-索引維護與監控" tabindex="-1">6. 索引維護與監控 <a class="header-anchor" href="#_6-索引維護與監控" aria-label="Permalink to &quot;6. 索引維護與監控&quot;">​</a></h2><ol><li><strong>重組 / 重建</strong>：<code>ALTER INDEX ... REBUILD;</code> (SQL Server) 或 <code>OPTIMIZE TABLE</code> (MySQL)</li><li><strong>碎片率</strong>：&gt;30% 建議 REBUILD</li><li><strong>冗餘索引偵測</strong>：慢查詢日誌 + <code>SHOW INDEX</code> + 卡片法清理</li><li><strong>統計資訊更新</strong>：<code>ANALYZE TABLE</code> 保證最佳化器選對索引</li></ol><hr><h2 id="_7-常見地雷與排雷技巧" tabindex="-1">7. 常見地雷與排雷技巧 <a class="header-anchor" href="#_7-常見地雷與排雷技巧" aria-label="Permalink to &quot;7. 常見地雷與排雷技巧&quot;">​</a></h2><table><thead><tr><th>地雷</th><th>解法</th></tr></thead><tbody><tr><td>在索引欄位使用函數 <code>YEAR(created_at)</code></td><td>建立 <strong>函數索引 (Expression Index)</strong> 或改寫範圍查詢</td></tr><tr><td>LIKE &#39;%keyword%&#39; 前置百分比</td><td>使用全文索引 (FULLTEXT, GIN)</td></tr><tr><td>多欄都建單欄索引 → 過度索引</td><td>合併為複合索引，或只保留高選擇性</td></tr><tr><td>低選擇度欄位建索引 (gender)</td><td>搭配高選擇度欄或省略索引</td></tr></tbody></table><hr><h2 id="_8-小結" tabindex="-1">8. 小結 <a class="header-anchor" href="#_8-小結" aria-label="Permalink to &quot;8. 小結&quot;">​</a></h2><ol><li><strong>B-Tree</strong> 適用大部分範圍/排序查詢；</li><li><strong>Hash Index</strong> 適用極端熱點等值查詢；</li><li><strong>複合索引</strong> = 把常用條件壓縮進單一樹；</li><li><strong>索引就像快取</strong>：讀快、寫慢、需清理；</li><li><strong>定期維護</strong>、監控慢查詢，才能持續保持「秒開體驗」。</li></ol><blockquote><p>下一步：動手用 <code>EXPLAIN</code> 為你的專案打造「量身訂做」的索引組合，像調 Service Worker Cache Policy 一樣，讓資料庫也能一樣快！</p></blockquote><h2 id="常見問題-faq" tabindex="-1">常見問題 FAQ <a class="header-anchor" href="#常見問題-faq" aria-label="Permalink to &quot;常見問題 FAQ&quot;">​</a></h2><h3 id="q1-b-tree-和-hash-索引該如何選擇" tabindex="-1">Q1: B-Tree 和 Hash 索引該如何選擇？ <a class="header-anchor" href="#q1-b-tree-和-hash-索引該如何選擇" aria-label="Permalink to &quot;Q1: B-Tree 和 Hash 索引該如何選擇？&quot;">​</a></h3><p><strong>A:</strong> 選擇依據：</p><ul><li><strong>B-Tree</strong>：適用範圍查詢、排序、模糊搜尋（<code>LIKE &#39;prefix%&#39;</code>）</li><li><strong>Hash</strong>：純等值查詢，如用戶ID查詢、狀態碼比對</li><li><strong>混合策略</strong>：熱點數據用Hash，一般查詢用B-Tree</li></ul><h3 id="q2-複合索引的欄位順序如何決定" tabindex="-1">Q2: 複合索引的欄位順序如何決定？ <a class="header-anchor" href="#q2-複合索引的欄位順序如何決定" aria-label="Permalink to &quot;Q2: 複合索引的欄位順序如何決定？&quot;">​</a></h3><p><strong>A:</strong> 遵循以下原則：</p><ol><li><strong>等值條件 &gt; 範圍條件</strong></li><li><strong>高選擇性 &gt; 低選擇性</strong>（cardinality高的在前）</li><li><strong>查詢頻率高 &gt; 查詢頻率低</strong></li></ol><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">-- 優先順序：country(等值) &gt; status(等值) &gt; created_at(範圍)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">CREATE</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> INDEX</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> idx_orders_country_status_date</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">ON</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> orders(country, </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">status</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, created_at);</span></span></code></pre></div><h3 id="q3-如何判斷索引是否需要重建" tabindex="-1">Q3: 如何判斷索引是否需要重建？ <a class="header-anchor" href="#q3-如何判斷索引是否需要重建" aria-label="Permalink to &quot;Q3: 如何判斷索引是否需要重建？&quot;">​</a></h3><p><strong>A:</strong> 監控指標：</p><ul><li><strong>碎片率 &gt; 30%</strong>：需要重建</li><li><strong>索引深度過深</strong>：樹高 &gt; 4層</li><li><strong>查詢效能下降</strong>：相同查詢變慢</li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">-- MySQL 檢查索引碎片</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">SHOW </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">TABLE</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> STATUS</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> LIKE</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">table_name</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">-- 重建索引</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">OPTIMIZE </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">TABLE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> table_name;</span></span></code></pre></div><h3 id="q4-覆蓋索引和非覆蓋索引的效能差異" tabindex="-1">Q4: 覆蓋索引和非覆蓋索引的效能差異？ <a class="header-anchor" href="#q4-覆蓋索引和非覆蓋索引的效能差異" aria-label="Permalink to &quot;Q4: 覆蓋索引和非覆蓋索引的效能差異？&quot;">​</a></h3><p><strong>A:</strong> 效能對比：</p><ul><li><strong>覆蓋索引</strong>：只需索引掃描，I/O次數少</li><li><strong>非覆蓋索引</strong>：需要回表查詢，額外I/O成本</li></ul><p>實測數據顯示覆蓋索引可提升 <strong>2-5倍</strong> 查詢效能。</p><h3 id="q5-什麼情況下不建議使用索引" tabindex="-1">Q5: 什麼情況下不建議使用索引？ <a class="header-anchor" href="#q5-什麼情況下不建議使用索引" aria-label="Permalink to &quot;Q5: 什麼情況下不建議使用索引？&quot;">​</a></h3><p><strong>A:</strong> 避免索引的情況：</p><ul><li><strong>小表</strong>（&lt; 1000筆資料）</li><li><strong>寫入頻繁的表</strong>（寫入:讀取 &gt; 3:1）</li><li><strong>低選擇性欄位</strong>（如 gender, status 只有2-3個值）</li></ul><h2 id="進階索引效能測試" tabindex="-1">進階索引效能測試 <a class="header-anchor" href="#進階索引效能測試" aria-label="Permalink to &quot;進階索引效能測試&quot;">​</a></h2><table><thead><tr><th>索引類型</th><th>查詢類型</th><th>100萬筆數據耗時</th><th>適用場景</th></tr></thead><tbody><tr><td>B-Tree</td><td>等值查詢</td><td>2-5ms</td><td>通用查詢</td></tr><tr><td>B-Tree</td><td>範圍查詢</td><td>10-50ms</td><td>日期、數值範圍</td></tr><tr><td>Hash</td><td>等值查詢</td><td>1-2ms</td><td>熱點數據查詢</td></tr><tr><td>複合索引</td><td>多條件查詢</td><td>1-3ms</td><td>複雜業務查詢</td></tr><tr><td>覆蓋索引</td><td>特定欄位查詢</td><td>0.5-1ms</td><td>報表、統計查詢</td></tr></tbody></table><p><em>測試環境：MySQL 8.0，SSD硬碟，16GB記憶體</em></p><h2 id="延伸閱讀" tabindex="-1">延伸閱讀 <a class="header-anchor" href="#延伸閱讀" aria-label="Permalink to &quot;延伸閱讀&quot;">​</a></h2>`,79),D=s("hr",null,null,-1),u=s("p",null,[s("strong",null,"📝 作者資訊："),a(" 本文由許恩綸撰寫，專注於資料庫效能優化與後端架構設計。")],-1),E=s("p",null,[s("strong",null,"🔄 最後更新："),a(" 2025年7月5日")],-1),b=s("p",null,[s("strong",null,"⚡ 效能提升："),a(" 透過本文技巧，可將查詢效能提升 "),s("strong",null,"60-1500倍"),a("！")],-1);function _(C,B,m,v,q,f){const t=n("VPNolebaseInlineLinkPreview"),l=n("NolebaseGitContributors"),h=n("NolebaseGitChangelog");return k(),d("div",null,[g,c,A,s("ol",null,[s("li",null,[i(t,{href:"#索引--pwa-快取觀念對照圖"},{default:e(()=>[a("索引 ≈ PWA 快取：觀念對照圖")]),_:1})]),s("li",null,[i(t,{href:"#b-treeb+tree關聯式資料庫的預設索引"},{default:e(()=>[a("B-Tree／B+Tree：關聯式資料庫的預設索引")]),_:1})]),s("li",null,[i(t,{href:"#hash-indexo1-等值查詢神器"},{default:e(()=>[a("Hash Index：O(1) 等值查詢神器")]),_:1})]),s("li",null,[i(t,{href:"#複合索引composite-multiple-column-index"},{default:e(()=>[a("複合索引（Composite Index）")]),_:1})]),s("li",null,[i(t,{href:"#快取策略-vs-索引策略最佳化思路對照"},{default:e(()=>[a("快取策略 vs. 索引策略")]),_:1})]),s("li",null,[i(t,{href:"#實戰從-3-秒--50-毫秒"},{default:e(()=>[a("實戰案例：從 3 秒 → 50 毫秒")]),_:1})]),s("li",null,[i(t,{href:"#索引維護與監控"},{default:e(()=>[a("索引維護與監控")]),_:1})]),s("li",null,[i(t,{href:"#常見地雷與排雷技巧"},{default:e(()=>[a("常見地雷與排雷技巧")]),_:1})])]),y,s("ul",null,[s("li",null,[i(t,{href:"https://dev.mysql.com/doc/refman/8.0/en/innodb-index-types.html",target:"_blank",rel:"noreferrer"},{default:e(()=>[a("MySQL InnoDB B+Tree 深度解析")]),_:1})]),s("li",null,[i(t,{href:"https://www.postgresql.org/docs/current/indexes-types.html",target:"_blank",rel:"noreferrer"},{default:e(()=>[a("PostgreSQL 索引類型完整指南")]),_:1})]),s("li",null,[i(t,{href:"https://www.oreilly.com/library/view/high-performance-mysql/9781449332471/",target:"_blank",rel:"noreferrer"},{default:e(()=>[a("High Performance MySQL 第三版")]),_:1})])]),D,u,E,b,i(l),i(h)])}const T=r(o,[["render",_]]);export{P as __pageData,T as default};
