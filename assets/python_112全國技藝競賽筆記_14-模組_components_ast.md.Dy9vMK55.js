import{_ as n,c as e,J as s,V as p,E as a,o as h}from"./chunks/framework.RK-3fdBv.js";const u=JSON.parse('{"title":"ast抽象語法樹","description":"","frontmatter":{"head":[["meta",{"name":"author","content":"許恩綸"}],["meta",{"name":"keywords","content":"ast,python,抽象語法樹"}],["meta",{"name":"og:title","content":"抽象語法樹|python"}],["meta",{"name":"og:description","content":"本章節介紹抽象語法樹，python程式碼提供範例。"}],["meta",{"name":"og:type","content":"article"}],["meta",{"name":"og:image","content":"https://lucashsu95.github.io/LucasHsu.dev/python/112全國技藝競賽筆記/14-模組/components/ast.html"}]]},"headers":[],"relativePath":"python/112全國技藝競賽筆記/14-模組/components/ast.md","filePath":"python/112全國技藝競賽筆記/14-模組/components/ast.md","lastUpdated":1729449116000}'),l={name:"python/112全國技藝競賽筆記/14-模組/components/ast.md"},k=p(`<h1 id="ast抽象語法樹" tabindex="-1">ast抽象語法樹 <a class="header-anchor" href="#ast抽象語法樹" aria-label="Permalink to &quot;ast抽象語法樹&quot;">​</a></h1><h2 id="介紹" tabindex="-1">介紹 <a class="header-anchor" href="#介紹" aria-label="Permalink to &quot;介紹&quot;">​</a></h2><p>當使用Python的<code>ast</code>模組時，你通常會分為兩個主要步驟：解析原始程式碼以構建AST，然後遍歷AST節點以執行所需的操作。以下是一個簡單的示例，演示如何使用<code>ast</code>模組來解析Python代碼並遍歷AST節點以查找函式定義。</p><p>首先，我們需要導入<code>ast</code>模組：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ast</span></span></code></pre></div><p>然後，讓我們看一個示例，假設我們有以下Python代碼：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">def</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> add</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> a </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> b</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">def</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> subtract</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> a </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> b</span></span></code></pre></div><p>我們可以使用<code>ast</code>模組來解析這段代碼並查找其中的函式定義：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">source_code </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">def add(a, b):</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    return a + b</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">def subtract(a, b):</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    return a - b</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 解析原始程式碼並構建AST</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">parsed_code </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ast</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">parse</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">source_code</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 遍歷AST以查找函式定義</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">for</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> node </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">in</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ast</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">walk</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">parsed_code</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> isinstance</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">node</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ast</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">FunctionDef</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">        print</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">f</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;Found function: </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">{</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">node</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">name</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">}</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre></div><p>在這個示例中，我們首先使用<code>ast.parse()</code>函數將原始程式碼解析為AST。然後，我們使用<code>ast.walk()</code>函數遍歷AST中的所有節點，並檢查是否某個節點是<code>ast.FunctionDef</code>類型的，如果是，則列印出函數的名稱。這將輸出：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>Found function: add</span></span>
<span class="line"><span>Found function: subtract</span></span></code></pre></div><p>這是一個簡單示例，演示了如何使用<code>ast</code>模組解析Python代碼並查找特定類型的節點。你可以根據需要執行更複雜的分析和操作。<code>ast</code>模組為更複雜的用例提供了豐富的功能，如修改AST以進行代碼轉換、查找特定模式的代碼等。</p><h2 id="進階" tabindex="-1">進階 <a class="header-anchor" href="#進階" aria-label="Permalink to &quot;進階&quot;">​</a></h2><p>除了函式定義外，<code>ast</code>模組還允許你分析Python代碼中的其他類型的語句、運算式和結構。以下是一些常見的<code>ast</code>模組功能：</p><ol><li><p><strong>Class Definition (類定義)</strong>: 你可以使用<code>ast.ClassDef</code>節點來查找和分析類的定義，包括類名、類屬性和方法。</p></li><li><p><strong>Control Flow Statements (控制流語句)</strong>: 你可以分析<code>ast.If</code>, <code>ast.While</code>, <code>ast.For</code>, <code>ast.With</code>, <code>ast.Break</code>, <code>ast.Continue</code>, <code>ast.Return</code>等節點，以理解和修改條件陳述式、迴圈、異常處理等。</p></li><li><p><strong>運算式 (Expressions)</strong>: 你可以使用<code>ast.Expr</code>節點來查找和分析運算式，包括數學運算、函式呼叫、變數賦值等。</p></li><li><p><strong>模組和導入 (Modules and Imports)</strong>: 你可以使用<code>ast.Module</code>節點來表示整個模組，以及使用<code>ast.Import</code>和<code>ast.ImportFrom</code>節點來分析模組導入。</p></li></ol><p><code>ast.parse()</code>函數用於將原始程式碼解析為AST物件。這是第一步，它將原始程式碼轉換為AST樹，使你能夠訪問和分析原始程式碼的結構。你可以使用<code>ast.parse()</code>函數來創建AST物件，然後使用其他<code>ast</code>模組的功能來操作和分析AST。</p><p><code>ast.walk()</code>函數用於遍歷AST樹中的所有節點，允許你訪問每個節點並進行操作。它是一個生成器，可用于深度優先遍歷AST，以便查找和處理AST中的各種元素。你可以在遍歷過程中檢查節點的類型，然後執行相應的操作。這對於分析、轉換和代碼生成非常有用。</p>`,17);function o(d,c,r,g,y,A){const i=a("NolebaseGitContributors"),t=a("NolebaseGitChangelog");return h(),e("div",null,[k,s(i),s(t)])}const E=n(l,[["render",o]]);export{u as __pageData,E as default};
