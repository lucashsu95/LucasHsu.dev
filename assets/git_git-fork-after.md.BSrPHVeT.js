import{_ as e,c as p,J as s,V as n,E as a,o as h}from"./chunks/framework.RK-3fdBv.js";const b=JSON.parse('{"title":"Git Fork 專案後同步遠端分支的方法","description":"","frontmatter":{"head":[["meta",{"name":"author","content":"許恩綸"}],["meta",{"name":"keywords","content":"git-fork, git-upstream, git-同步, git-merge, git-fetch, git-fork-同步, github-fork, git-遠端分支"}],["meta",{"property":"og:title","content":"Git Fork 專案後同步遠端分支教學｜完整步驟與指令範例"}],["meta",{"property":"og:description","content":"Git fork 專案後如何同步原作者的更新？本篇教學詳細說明設定 upstream、fetch、merge 的完整流程，並提供實用指令範例，讓你輕鬆保持 fork 專案與原專案同步。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"./imgs/git-cover.png"}]]},"headers":[],"relativePath":"git/git-fork-after.md","filePath":"git/git-fork-after.md","lastUpdated":1758447054000}'),l={name:"git/git-fork-after.md"},o=n(`<h1 id="git-fork-專案後同步遠端分支的方法" tabindex="-1">Git Fork 專案後同步遠端分支的方法 <a class="header-anchor" href="#git-fork-專案後同步遠端分支的方法" aria-label="Permalink to &quot;Git Fork 專案後同步遠端分支的方法&quot;">​</a></h1><p>當你 fork 別人的專案並 clone 到本地後，原作者可能會持續更新程式碼。這時候你需要同步原作者的更新，讓你的 fork 保持最新狀態。</p><h2 id="🔍-查看目前的遠端設定" tabindex="-1">🔍 查看目前的遠端設定 <a class="header-anchor" href="#🔍-查看目前的遠端設定" aria-label="Permalink to &quot;🔍 查看目前的遠端設定&quot;">​</a></h2><p>首先檢查你的遠端倉庫設定：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> remote</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -v</span></span></code></pre></div><p>通常會看到：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>origin  https://github.com/你的帳號/專案.git (fetch)</span></span>
<span class="line"><span>origin  https://github.com/你的帳號/專案.git (push)</span></span></code></pre></div><p>如果你想要同步原作者的更新，必須要有原作者倉庫的遠端設定，通常命名為 upstream。</p><h2 id="_1-設定-upstream" tabindex="-1">1. 設定 upstream <a class="header-anchor" href="#_1-設定-upstream" aria-label="Permalink to &quot;1. 設定 upstream&quot;">​</a></h2><p>如果你在 fork 後沒有設定 upstream，可以使用以下指令新增：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> remote</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> add</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> upstream</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> https://github.com/原作者帳號/專案.git</span></span></code></pre></div><p>設定完成後，再次執行 <code>git remote -v</code> 確認設定是否正確：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>origin  https://github.com/你的帳號/專案.git (fetch)</span></span>
<span class="line"><span>origin  https://github.com/你的帳號/專案.git (push)</span></span>
<span class="line"><span>upstream        https://github.com/原作者帳號/專案.git (fetch)</span></span>
<span class="line"><span>upstream        https://github.com/原作者帳號/專案.git (push)</span></span></code></pre></div><h2 id="_2-獲取原作者的更新" tabindex="-1">2. 獲取原作者的更新 <a class="header-anchor" href="#_2-獲取原作者的更新" aria-label="Permalink to &quot;2. 獲取原作者的更新&quot;">​</a></h2><p>使用 <code>git fetch</code> 指令從 upstream 獲取原作者的更新：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> fetch</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> upstream</span></span></code></pre></div><p>這個指令不會自動合併變更，只是將原作者的更新下載到本地。</p><h2 id="_3-合併原作者的更新" tabindex="-1">3. 合併原作者的更新 <a class="header-anchor" href="#_3-合併原作者的更新" aria-label="Permalink to &quot;3. 合併原作者的更新&quot;">​</a></h2><p>接下來，將原作者的更新合併到你的本地分支。首先，切換到你想要更新的分支，通常是 master：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> master</span></span></code></pre></div><p>然後執行合併：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> merge</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> upstream/master</span></span></code></pre></div><p>如果有衝突，Git 會提示你手動解決衝突。解決完衝突後，記得執行 <code>git add</code> 和 <code>git commit</code> 提交變更。</p><h2 id="_4-推送更新到你的遠端倉庫" tabindex="-1">4. 推送更新到你的遠端倉庫 <a class="header-anchor" href="#_4-推送更新到你的遠端倉庫" aria-label="Permalink to &quot;4. 推送更新到你的遠端倉庫&quot;">​</a></h2><p>最後，將更新推送到你的 GitHub 倉庫：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> push</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> origin</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> master</span></span></code></pre></div><h2 id="完整指令摘要" tabindex="-1">完整指令摘要 <a class="header-anchor" href="#完整指令摘要" aria-label="Permalink to &quot;完整指令摘要&quot;">​</a></h2><p>以下是從設定 upstream 到同步更新的完整指令摘要：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> remote</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> add</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> upstream</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> https://github.com/原作者帳號/專案.git</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> fetch</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> upstream</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> master</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> merge</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> upstream/master</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> push</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> origin</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> master</span></span></code></pre></div><h2 id="結語" tabindex="-1">結語 <a class="header-anchor" href="#結語" aria-label="Permalink to &quot;結語&quot;">​</a></h2><p>透過以上步驟，你可以輕鬆地將原作者的更新同步到你的 fork 專案中。建議定期檢查並同步更新，保持你的專案與原專案的一致性。</p>`,31);function r(k,c,d,g,m,u){const i=a("NolebaseGitContributors"),t=a("NolebaseGitChangelog");return h(),p("div",null,[o,s(i),s(t)])}const y=e(l,[["render",r]]);export{b as __pageData,y as default};
