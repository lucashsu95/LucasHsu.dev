import{_ as p,c as e,m as s,J as a,w as h,a as i,V as r,E as l,o as d}from"./chunks/framework.RK-3fdBv.js";const W=JSON.parse('{"title":"最短路徑","description":"","frontmatter":{},"headers":[],"relativePath":"python/112全國技藝競賽筆記/12-圖形最短路徑演算法/最短路徑.md","filePath":"python/112全國技藝競賽筆記/12-圖形最短路徑演算法/最短路徑.md","lastUpdated":1722134009000}'),y={name:"python/112全國技藝競賽筆記/12-圖形最短路徑演算法/最短路徑.md"},g=s("h1",{id:"最短路徑",tabindex:"-1"},[i("最短路徑 "),s("a",{class:"header-anchor",href:"#最短路徑","aria-label":'Permalink to "最短路徑"'},"​")],-1),o=s("h2",{id:"學習資源",tabindex:"-1"},[i("學習資源 "),s("a",{class:"header-anchor",href:"#學習資源","aria-label":'Permalink to "學習資源"'},"​")],-1),A=s("h2",{id:"優缺點",tabindex:"-1"},[i("優缺點 "),s("a",{class:"header-anchor",href:"#優缺點","aria-label":'Permalink to "優缺點"'},"​")],-1),D=s("thead",null,[s("tr",null,[s("th",null,"演算法名稱"),s("th",null,"優點"),s("th",null,"缺點"),s("th",null,"解釋"),s("th",null,"程式碼")])],-1),E=s("td",null,"Floyd-Warshall 演算法",-1),_=s("td",null,"適用於有向圖或無向圖，處理帶有負權重的圖",-1),c=s("td",null,"時間複雜度高，適用於小型圖",-1),C=s("td",null,"用於找解決所有點對之間的最短路徑",-1),B=s("td",null,"Union-find Algorithm (並查集)",-1),u=s("td",null,"查詢和合併的時間複雜度都很快",-1),f=s("td",null,"不適用於帶權重的邊，只能處理無權重的圖",-1),m=s("td",null,"用於快速查詢兩個點是否屬於同一集合",-1),b=s("td",null,"Dijkstra 演算法",-1),F=s("td",null,"適用於有向圖和無向圖，處理非負權重的圖",-1),x=s("td",null,"無法處理帶有負權重的邊",-1),P=s("td",null,"用於找解決一個點到其他所有點的最短路徑",-1),v=s("td",null,"Bellman-Ford 演算法",-1),N=s("td",null,"可處理帶有負權重的圖",-1),T=s("td",null,"時間複雜度較高，對於大型圖效能較差",-1),V=s("td",null,"用於找解決一個點到其他所有點的最短路徑，且可處理帶有負權重的邊",-1),w=s("tr",null,[s("td",null,"Bellman-Ford 演算法 - 佇列優化"),s("td",null,"在處理稠密圖時效能較佳"),s("td",null,"實現較複雜，不如 Dijkstra 演算法常用"),s("td",null,"Bellman-Ford 演算法的佇列優化版本"),s("td",null,"同上")],-1),S=r("",4);function I(j,q,G,J,L,U){const n=l("VPNolebaseInlineLinkPreview"),t=l("NolebaseGitContributors"),k=l("NolebaseGitChangelog");return d(),e("div",null,[g,o,s("ul",null,[s("li",null,[a(n,{href:"https://super9.space/archives/1562",target:"_blank",rel:"noreferrer"},{default:h(()=>[i("以Python實作演算法 – Algorithms Implements using Python")]),_:1})]),s("li",null,[a(n,{href:"https://ithelp.ithome.com.tw/articles/10209278",target:"_blank",rel:"noreferrer"},{default:h(()=>[i("[演算法] 並查集 (Union-find Algorithm)")]),_:1})]),s("li",null,[a(n,{href:"https://hackmd.io/@CLKO/HJL8bMuxN?type=view",target:"_blank",rel:"noreferrer"},{default:h(()=>[i("最短路徑 - DIJKSTRA")]),_:1})])]),A,s("table",null,[D,s("tbody",null,[s("tr",null,[E,_,c,C,s("td",null,[a(n,{href:"./Floyd-Warshall"},{default:h(()=>[i("Floyd-Warshall 程式碼範例")]),_:1})])]),s("tr",null,[B,u,f,m,s("td",null,[a(n,{href:"#union-find-程式碼"},{default:h(()=>[i("並查集 (Union-Find) 程式碼範例")]),_:1})])]),s("tr",null,[b,F,x,P,s("td",null,[a(n,{href:"./Dijkstra's演算法"},{default:h(()=>[i("Dijkstra 程式碼範例")]),_:1})])]),s("tr",null,[v,N,T,V,s("td",null,[a(n,{href:"./Bellman–Ford演算法"},{default:h(()=>[i("Bellman-Ford 程式碼範例")]),_:1})])]),w])]),S,s("p",null,[a(n,{href:"https://zerojudge.tw/ShowProblem?problemid=d453",target:"_blank",rel:"noreferrer"},{default:h(()=>[i("d453. 三、最短距離")]),_:1})]),a(t),a(k)])}const K=p(y,[["render",I]]);export{W as __pageData,K as default};
