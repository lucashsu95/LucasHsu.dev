import{_ as l,c as t,m as s,J as n,w as h,a as i,V as k,E as p,o as e}from"./chunks/framework.CiAxhH1b.js";const $=JSON.parse('{"title":"最短路徑","description":"","frontmatter":{},"headers":[],"relativePath":"python/112全國技藝競賽筆記/12-圖形最短路徑演算法/最短路徑.md","filePath":"python/112全國技藝競賽筆記/12-圖形最短路徑演算法/最短路徑.md","lastUpdated":1729437298000}'),r={name:"python/112全國技藝競賽筆記/12-圖形最短路徑演算法/最短路徑.md"},d=s("h1",{id:"最短路徑",tabindex:"-1"},[i("最短路徑 "),s("a",{class:"header-anchor",href:"#最短路徑","aria-label":'Permalink to "最短路徑"'},"​")],-1),y=s("h2",{id:"學習資源",tabindex:"-1"},[i("學習資源 "),s("a",{class:"header-anchor",href:"#學習資源","aria-label":'Permalink to "學習資源"'},"​")],-1),g=s("h2",{id:"優缺點",tabindex:"-1"},[i("優缺點 "),s("a",{class:"header-anchor",href:"#優缺點","aria-label":'Permalink to "優缺點"'},"​")],-1),A=s("thead",null,[s("tr",null,[s("th",null,"演算法名稱"),s("th",null,"優點"),s("th",null,"缺點"),s("th",null,"解釋"),s("th",null,"程式碼")])],-1),o=s("td",null,"Floyd-Warshall 演算法",-1),D=s("td",null,"適用於有向圖或無向圖，處理帶有負權重的圖",-1),E=s("td",null,"時間複雜度高，適用於小型圖",-1),_=s("td",null,"用於找解決所有點對之間的最短路徑",-1),c=s("td",null,"Union-find Algorithm (並查集)",-1),B=s("td",null,"查詢和合併的時間複雜度都很快",-1),C=s("td",null,"不適用於帶權重的邊，只能處理無權重的圖",-1),u=s("td",null,"用於快速查詢兩個點是否屬於同一集合",-1),f=s("td",null,"Dijkstra 演算法",-1),m=s("td",null,"適用於有向圖和無向圖，處理非負權重的圖",-1),F=s("td",null,"無法處理帶有負權重的邊",-1),x=s("td",null,"用於找解決一個點到其他所有點的最短路徑",-1),b=s("td",null,"Bellman-Ford 演算法",-1),P=s("td",null,"可處理帶有負權重的圖",-1),v=s("td",null,"時間複雜度較高，對於大型圖效能較差",-1),N=s("td",null,"用於找解決一個點到其他所有點的最短路徑，且可處理帶有負權重的邊",-1),T=s("tr",null,[s("td",null,"Bellman-Ford 演算法 - 佇列優化"),s("td",null,"在處理稠密圖時效能較佳"),s("td",null,"實現較複雜，不如 Dijkstra 演算法常用"),s("td",null,"Bellman-Ford 演算法的佇列優化版本"),s("td",null,"同上")],-1),V=k("",4);function w(S,I,j,q,J,L){const a=p("VPNolebaseInlineLinkPreview");return e(),t("div",null,[d,y,s("ul",null,[s("li",null,[n(a,{href:"https://super9.space/archives/1562",target:"_blank",rel:"noreferrer"},{default:h(()=>[i("以Python實作演算法 – Algorithms Implements using Python")]),_:1})]),s("li",null,[n(a,{href:"https://ithelp.ithome.com.tw/articles/10209278",target:"_blank",rel:"noreferrer"},{default:h(()=>[i("[演算法] 並查集 (Union-find Algorithm)")]),_:1})]),s("li",null,[n(a,{href:"https://hackmd.io/@CLKO/HJL8bMuxN?type=view",target:"_blank",rel:"noreferrer"},{default:h(()=>[i("最短路徑 - DIJKSTRA")]),_:1})])]),g,s("table",null,[A,s("tbody",null,[s("tr",null,[o,D,E,_,s("td",null,[n(a,{href:"./Floyd-Warshall"},{default:h(()=>[i("Floyd-Warshall 程式碼範例")]),_:1})])]),s("tr",null,[c,B,C,u,s("td",null,[n(a,{href:"#union-find-程式碼"},{default:h(()=>[i("並查集 (Union-Find) 程式碼範例")]),_:1})])]),s("tr",null,[f,m,F,x,s("td",null,[n(a,{href:"./Dijkstra's演算法"},{default:h(()=>[i("Dijkstra 程式碼範例")]),_:1})])]),s("tr",null,[b,P,v,N,s("td",null,[n(a,{href:"./Bellman–Ford演算法"},{default:h(()=>[i("Bellman-Ford 程式碼範例")]),_:1})])]),T])]),V,s("p",null,[n(a,{href:"https://zerojudge.tw/ShowProblem?problemid=d453",target:"_blank",rel:"noreferrer"},{default:h(()=>[i("d453. 三、最短距離")]),_:1})])])}const W=l(r,[["render",w]]);export{$ as __pageData,W as default};
