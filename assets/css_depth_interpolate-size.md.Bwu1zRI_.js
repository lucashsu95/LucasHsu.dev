import{_ as t,c as n,J as s,V as l,E as i,o}from"./chunks/framework.RK-3fdBv.js";const A=JSON.parse('{"title":"interpolate-size","description":"","frontmatter":{},"headers":[],"relativePath":"css/depth/interpolate-size.md","filePath":"css/depth/interpolate-size.md","lastUpdated":1743260101000}'),h={name:"css/depth/interpolate-size.md"},p=l(`<h1 id="interpolate-size" tabindex="-1">interpolate-size <a class="header-anchor" href="#interpolate-size" aria-label="Permalink to &quot;interpolate-size&quot;">​</a></h1><p><code>interpolate-size: allow-keywords</code> 是 CSS 中的一個實驗性功能，主要用於控制動畫或過渡中尺寸屬性的插值行為，特別是在使用內在尺寸關鍵字（如 <code>auto</code>、<code>fit-content</code>、<code>min-content</code> 等）時。以下是其主要用途：</p><h2 id="用途" tabindex="-1"><strong>用途</strong> <a class="header-anchor" href="#用途" aria-label="Permalink to &quot;**用途**&quot;">​</a></h2><ol><li><p><strong>支援內在尺寸關鍵字的動畫</strong><br> 傳統 CSS 動畫無法直接處理 <code>height: auto</code> 或 <code>width: auto</code> 等關鍵字，而 <code>interpolate-size: allow-keywords</code> 允許在這些關鍵字與固定尺寸（如 \`\`）之間進行平滑過渡。</p></li><li><p><strong>實現展開/收起效果</strong><br> 用於創建元素從隱藏（如 <code>height: 0</code>）到展開（如 <code>height: auto</code>）的平滑過渡效果，常見於彈出層、模態框或下拉菜單等場景。</p></li><li><p><strong>提升動畫的自然度</strong><br> 使動畫在固定尺寸與內在尺寸之間過渡時更加流暢，避免傳統動畫中尺寸突然跳變的問題。</p></li><li><p><strong>支援更多動畫場景</strong><br> 在無法使用非盒子模型屬性（如 <code>transform</code>）的情況下，提供一種替代方案來實現複雜的動畫效果。</p></li></ol><hr><h2 id="範例" tabindex="-1"><strong>範例</strong> <a class="header-anchor" href="#範例" aria-label="Permalink to &quot;**範例**&quot;">​</a></h2><p>以下是一個簡單範例，展示如何使用 <code>interpolate-size: allow-keywords</code> 實現從 <code>height: 0</code> 到 <code>height: auto</code> 的平滑過渡：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">root</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  interpolate-size</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> allow-keywords</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> /* 啟用內在尺寸關鍵字的插值 */</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">box</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  height</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  overflow</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> hidden</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  transition</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> height </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0.5</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">s</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> ease-in-out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">box</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">hover</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  height</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> auto</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> /* 從 0 過渡到 auto */</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre></div><h3 id="效果說明" tabindex="-1"><strong>效果說明</strong> <a class="header-anchor" href="#效果說明" aria-label="Permalink to &quot;**效果說明**&quot;">​</a></h3><ul><li>當滑鼠懸停在 <code>.box</code> 元素上時，其高度會從 <code>0</code> 平滑過渡到 <code>auto</code>，顯示全部內容。</li><li><code>interpolate-size: allow-keywords</code> 確保了 <code>height: auto</code> 可以被正確過渡，而不是像傳統 CSS 過渡那樣直接跳變。</li></ul><hr><h2 id="注意事項" tabindex="-1"><strong>注意事項</strong> <a class="header-anchor" href="#注意事項" aria-label="Permalink to &quot;**注意事項**&quot;">​</a></h2><ol><li><p><strong>實驗性功能</strong><br> 目前 <code>interpolate-size</code> 仍處於實驗階段，並非所有瀏覽器都支持。在使用前需檢查瀏覽器兼容性。</p></li><li><p><strong>適用範圍</strong><br> 僅支援從固定尺寸（如 <code>100px</code>）到內在尺寸（如 <code>auto</code>）的過渡，不支援兩個內在尺寸之間的過渡。</p></li><li><p><strong>繼承性</strong><br><code>interpolate-size</code> 是繼承屬性，可通過在 <code>:root</code> 或特定容器上設置來控制其作用範圍。</p></li></ol><hr><h2 id="總結" tabindex="-1"><strong>總結</strong> <a class="header-anchor" href="#總結" aria-label="Permalink to &quot;**總結**&quot;">​</a></h2><p><code>interpolate-size: allow-keywords</code> 為 CSS 動畫提供了更強大的功能，特別是在處理內在尺寸關鍵字時，能夠實現更自然和流暢的過渡效果。雖然它仍處於實驗階段，但在支持的瀏覽器中，它可以顯著提升動畫的表現力。</p>`,16);function r(d,k,c,g,y,u){const a=i("NolebaseGitContributors"),e=i("NolebaseGitChangelog");return o(),n("div",null,[p,s(a),s(e)])}const _=t(h,[["render",r]]);export{A as __pageData,_ as default};
