import{_ as i,c as p,J as a,V as o,E as s,o as l}from"./chunks/framework.RK-3fdBv.js";const y=JSON.parse('{"title":"Clamp","description":"","frontmatter":{"head":[["meta",{"name":"author","content":"許恩綸"}],["meta",{"name":"keywords","content":"CSS, css, clamp函數, 響應式設計, 流動排版"}],["meta",{"property":"og:title","content":"CSS技巧 - 使用clamp()函數進行響應式設計"}],["meta",{"property":"og:description","content":"學習如何使用CSS的clamp()函數來實現響應式設計，並在不同視口寬度下自動調整元素大小"}],["meta",{"property":"og:type","content":"article"}]]},"headers":[],"relativePath":"css/clamp.md","filePath":"css/clamp.md","lastUpdated":1758447054000}'),c={name:"css/clamp.md"},d=o('<h1 id="clamp" tabindex="-1">Clamp <a class="header-anchor" href="#clamp" aria-label="Permalink to &quot;Clamp&quot;">​</a></h1><h2 id="介紹" tabindex="-1">介紹 <a class="header-anchor" href="#介紹" aria-label="Permalink to &quot;介紹&quot;">​</a></h2><p>CSS的<code>clamp()</code>函數是一個強大的工具，用於在指定的範圍內限制數值。這個函數接受三個參數：<code>最小值、首選值和最大值</code>，並根據這些值自動調整輸出。這使得<code>clamp()</code>非常適合用於字體大小、寬度等屬性，特別是在創建流動排版時，一行就可以做好RWD。</p><h3 id="clamp-函數的結構" tabindex="-1"><code>clamp()</code>函數的結構 <a class="header-anchor" href="#clamp-函數的結構" aria-label="Permalink to &quot;`clamp()`函數的結構&quot;">​</a></h3><p><code>clamp()</code>的語法如下：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">clamp(min</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> preferred</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> max)</span></span></code></pre></div><ul><li><strong>最小值</strong>（min）：範圍的下限，首選值不能低於此值。</li><li><strong>首選值</strong>（preferred）：在最小值和最大值之間的理想值，通常使用相對單位（如<code>vw</code>）來實現流動效果。</li><li><strong>最大值</strong>（max）：範圍的上限，首選值不能高於此值。</li></ul><p>例如，以下將元素的寬度設置為不小於<code>350px</code>，不大於<code>600px</code>，理想情況下為<code>50%</code>：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">width: clamp(350px</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 50%</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 600px);</span></span></code></pre></div><h2 id="使用案例" tabindex="-1">使用案例 <a class="header-anchor" href="#使用案例" aria-label="Permalink to &quot;使用案例&quot;">​</a></h2><p><code>clamp()</code>函數不僅限於字體大小，還可以應用於其他CSS屬性，例如：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">font-size</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">: clamp(32px</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 4vw</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 48px);</span></span></code></pre></div><p>在這個例子中，字體大小在<code>32px</code>到<code>48px</code>之間流動，根據視口寬度的<code>4vw</code>值進行調整。</p><h2 id="流動排版" tabindex="-1">流動排版 <a class="header-anchor" href="#流動排版" aria-label="Permalink to &quot;流動排版&quot;">​</a></h2><p>使用<code>clamp()</code>可以簡化流動排版的實現，避免使用繁瑣的媒體查詢。這對於創建響應式設計非常有用，特別是在字體大小和元素尺寸需要隨著屏幕大小變化時。例如：</p><table><thead><tr><th>視口寬度 (px)</th><th>首選值 (px)</th><th>實際值 (px)</th></tr></thead><tbody><tr><td>500</td><td>20</td><td>32</td></tr><tr><td>900</td><td>36</td><td>36</td></tr><tr><td>1400</td><td>56</td><td>48</td></tr></tbody></table><p>在這個表格中，可以看到如何根據不同的視口寬度，<code>clamp()</code>自動調整字體大小，保持在設定的範圍內。</p>',17);function n(h,r,k,m,g,C){const e=s("NolebaseGitContributors"),t=s("NolebaseGitChangelog");return l(),p("div",null,[d,a(e),a(t)])}const _=i(c,[["render",n]]);export{y as __pageData,_ as default};
